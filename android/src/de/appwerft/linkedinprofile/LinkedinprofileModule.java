/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.linkedinprofile;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.app.Activity;

import com.linkedin.platform.DeepLinkHelper;
import com.linkedin.platform.errors.LIDeepLinkError;
import com.linkedin.platform.listeners.DeepLinkListener;

@Kroll.module(name = "Linkedinprofile", id = "de.appwerft.linkedinprofile")
public class LinkedinprofileModule extends KrollModule {
	private final class LinkedInResultHandler implements DeepLinkListener {
		@Override
		public void onDeepLinkSuccess() {
			if (onsuccess != null) {
				onsuccess.call(getKrollObject(), new KrollDict());
			}
			if (hasListeners("onsuccess")) {
				fireEvent("onsuccess", new KrollDict());
			}
		}

		@Override
		public void onDeepLinkError(LIDeepLinkError error) {
			KrollDict kd = new KrollDict();
			kd.put("error", error.toString());
			if (onerror != null) {
				onerror.call(getKrollObject(), kd);
			}
			if (hasListeners("onerror")) {
				fireEvent("onerror", kd);
			}
		}
	}

	// Standard Debugging variables
	private static final String LCAT = "LinkedIn ðŸ‘¥";
	KrollFunction onsuccess;
	KrollFunction onerror;
	private String memberId = null;
	private DeepLinkHelper deepLinkHelper;
	private Activity activity;
	String[] alert = null;

	public LinkedinprofileModule() {
		super();
		deepLinkHelper = DeepLinkHelper.getInstance();
		activity = TiApplication.getAppCurrentActivity();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
	}

	private void getOptions(KrollDict options) {
		if (options.containsKeyAndNotNull("onsuccess")) {
			Object o = options.get("onsuccess");
			if (o instanceof KrollFunction) {
				this.onsuccess = (KrollFunction) o;
			} else {
				Log.w(LCAT, "parameter 'onsuccess' must be a function");
			}
		}
		if (options.containsKeyAndNotNull("onerror")) {
			Object o = options.get("onerror");
			if (o instanceof KrollFunction) {
				this.onerror = (KrollFunction) o;
			} else {
				Log.w(LCAT, "parameter 'onerror' must be a function");
			}
		}
		if (options.containsKeyAndNotNull("alert")) {
			this.alert = options.getStringArray("alert");
		}
		if (alert != null)
			deepLinkHelper.setTexts(alert);
		if (options.containsKeyAndNotNull("memberId")) {
			this.memberId = options.getString("memberId");
		}
	}

	@Kroll.method
	public void openOtherProfile(KrollDict options) {
		getOptions(options);
		Log.d(LCAT, "\n\n>>>>>>> try to openOtherProfile() from TiModule");
		if (memberId == null)
			Log.e(LCAT, "missing memberId");
		else
			deepLinkHelper.openOtherProfile(activity, memberId,
					new LinkedInResultHandler());
	}

	@Kroll.method
	public void openCurrentProfile(KrollDict options) {
		getOptions(options);
		deepLinkHelper
				.openCurrentProfile(activity, new LinkedInResultHandler());
	}
}
